---
AWSTemplateFormatVersion: '2010-09-09'
Description: This stack deploys the core infrastructure and IAM resources
             to be used for Nubox.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: nubox

  SourceStackName:
    Description: "Source stack name"
    Type: String
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    Default: "nubox"

  # VpcId:
  #   Type: 'AWS::EC2::VPC::Id'
  #   Description: VpcId of your existing Virtual Private Cloud (VPC)
  #   ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
  
  # Subnets:
  #   Type: 'List<AWS::EC2::Subnet::Id>'
  #   Description: The list of SubnetIds in your Virtual Private Cloud (VPC)
  #   ConstraintDescription: >-
  #     must be a list of at least two existing subnets associated with at least
  #     two different availability zones. They should be residing in the selected
  #     Virtual Private Cloud.
  
  InstanceType:
    Type: String
    Description: WebServer EC2 instance type
    Default: t3a.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t3a.nano
      - t3a.micro
      - t3a.small
    ConstraintDescription: must be a valid EC2 instance type.
  
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
    # Default: nubox
  
  LatestLinuxAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  AsgMinSize:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 1.
    Default: '1'

  AsgMaxSize:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 3.
    Default: '3'

  AsgDesiredCapacity:
    Type: Number
    Description: >
      Specifies the number of instances to launch and register to the cluster.
      Defaults to 2.
    Default: '2'

  WelcomeMessage:
    Type: String
    Default: "Hola Nubox"

  WelcomeImageUrl:
    Type: String
    Default: "https://info.nubox.com/hubfs/nubox-logo.png"

Resources:
  ###############
  #     IAM     #
  ###############
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ec2-instance-profile
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: EC2InstanceRole
    Properties:
      Roles:
        - !Ref EC2InstanceRole
      InstanceProfileName: !Sub ${EnvironmentName}-ec2-instance-profile

  ###############
  #     ASG     #
  ###############
  ASGWebServer:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref AsgMinSize
      MaxSize: !Ref AsgMaxSize
      DesiredCapacity: !Ref AsgDesiredCapacity
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      VPCZoneIdentifier:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ','
            - Fn::ImportValue:
                Fn::Sub: '${SourceStackName}-PrivateSubnets'
        - Fn::Select:
          - 1
          - Fn::Split:
            - ','
            - Fn::ImportValue:
                Fn::Sub: '${SourceStackName}-PrivateSubnets'

    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'

  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple Apache application
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              httpd: []
          groups:
            apache: {}
          users:
            "apache":
              groups:
                - "apache"
          # sources:
          #   "/home/ec2-user/aws-cli": "https://github.com/aws/aws-cli/tarball/master"
          files:
            "/var/www/html/index.html":
              content: !Sub |
                <img src="${WelcomeImageUrl}"alt="Nubox Logo"/>
                <h1>${WelcomeMessage}</h1>
              mode: '000644'
              owner: apache
              group: apache
            # The cfn-hup.conf file stores the name of the stack and the AWS credentials that the cfn-hup daemon targets.
            "/etc/cfn/cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                # The interval used to check for changes to the resource metadata in minutes. Default is 15
                interval=2
              mode: "000400"
              owner: "root"
              group: "root"
            # The user actions that the cfn-hup daemon calls periodically are defined in the hooks.conf configuration file.
            # To support composition of several applications deploying change notification hooks, cfn-hup supports a directory named hooks.d that is located in the hooks configuration directory. You can place one or more additional hooks configuration files in the hooks.d directory. The additional hooks files must use the same layout as the hooks.conf file.
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
              mode: "000400"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    Properties:
      ImageId: !Ref LatestLinuxAmiId
      KeyName: !Ref KeyName
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # install ssm-agent
            yum install -y https://s3.us-east-1.amazonaws.com/amazon-ssm-us-east-1/latest/linux_amd64/amazon-ssm-agent.rpm
             # Get the latest codeDeploy & CloudFormation package
            yum update -y
            yum install aws-cfn-bootstrap
            amazon-linux-extras install ruby2.6
            curl https://aws-codedeploy-us-west-2.s3.us-west-2.amazonaws.com/latest/install --output /home/ec2-user/install
            chmod +x /home/ec2-user/install
            /home/ec2-user/./install auto
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r LaunchConfig --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource ASGWebServer --region ${AWS::Region}

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access and HTTP access on the inbound port
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          SourceSecurityGroupId: !Select 
            - 0
            - !GetAtt 
              - ApplicationLoadBalancer
              - SecurityGroups
      VpcId:
        Fn::ImportValue: 
          Fn::Sub: "${SourceStackName}-VpcId"

  ###############
  #     ALB     #
  ###############
  # security group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName}-ALB-SG
      GroupDescription: Access to ALB from anywhere on the internet
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet, port 80
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
      VpcId:
        Fn::ImportValue: 
          Fn::Sub: "${SourceStackName}-VpcId"

  # application load balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-ALB
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - Fn::Select:
          - 0
          - Fn::Split:
            - ','
            - Fn::ImportValue:
                Fn::Sub: '${SourceStackName}-PublicSubnets'
        - Fn::Select:
          - 1
          - Fn::Split:
            - ','
            - Fn::ImportValue:
                Fn::Sub: '${SourceStackName}-PublicSubnets'

  # listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref ALBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # target group
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-TargetGroup
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId:
        Fn::ImportValue: 
          Fn::Sub: "${SourceStackName}-VpcId"

Outputs:
  URL:
    Description: URL of the website
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName

  ASGWebServer:
    Description: ASG WebServer Name
    Value: !Ref ASGWebServer
    Export:
      Name: !Sub "${EnvironmentName}-ASGWebServer"

  ALBTargetGroup:
    Description: ASG WebServer Name
    Value: !GetAtt ALBTargetGroup.TargetGroupName
    Export:
      Name: !Sub "${EnvironmentName}-ALBTargetGroup"